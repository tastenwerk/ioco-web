link( rel='stylesheet', href='/stylesheets/web.css' )
link( rel='stylesheet', href='/stylesheets/ioco-page.css')
link( rel='stylesheet', href='/stylesheets/ioco.page-designer.css' )
#ioco-webpages
  .ioco-sidebar
    .ioco-tree

      h1.title=t('webpages.title')

      .tree-controls
        a.btn.w-icn-only.live-tipsy( href='#', translate-title='webpages.new', data-bind='click: newItemForm' )
          span.icn-plus.icn
        a.btn.w-icn-only.live-tipsy( href='#', translate-title='refresh', data-bind='click: fetchData' )
          span.icn.icn-refresh
        a.btn.w-icn-only.live-tipsy.enableable( href='#', translate-title='delete_selected', data-bind='css: {enabled: selectedItems().length > 0}, click: deleteSelected')
          span.icn.icn-trash

      br.clearfix

      ul.tree-content( data-bind='template: {name: "webItemTemplate", foreach: items}' )

  .ioco-content

    .click-for-details.no-item-form
      h1.title=t('webpages.title')
      span=t('document.click_for_details')

    #ioco-webpage-form.item-form( data-bind='template: {name: "webItemForm"}' )

include ko_templates/web_item
include ko_templates/web_item_form

script(type='text/javascript', src='/javascripts/ioco.page-designer.js')
script(type='text/javascript', src='/javascripts/web_files_view_model.js')

script(type='text/javascript')
  if( typeof(ace) === 'undefined' )
    $.getScript( '/javascripts/3rdparty/ace.js' );

- for( i in ioco.plugins )
  - if( ioco.plugins[i].pageDesignerJSPlugins )
    - for( var j in ioco.plugins[i].pageDesignerJSPlugins )
      script(type='text/javascript', src='#{ioco.plugins[i].pageDesignerJSPlugins[j]}')
  
script(type='text/javascript')
  
  function renderForm( item ){
    $('#pd').iocoPageDesigner({
      i18n: true,
      csrf: $('#_csrf').val(),
      webPage: new ioco.pageDesigner.WebPage( item ),
      after: {
        create: function( plugin, webBit, boxDom, json, done ){
          ioco.notify( json.flash );
          done();
        }
      },
      on: function( action, item, callback ){
        if( action === 'createRootWebBit' ){
          itemData.rootWebBitId = item.rootWebBitId;
          callback( null );
        }
      }
    });
    $('.top-tabs-nav-title.page-name').text( item.name() );
    ioco.parseTranslations();
  }

  function renderNewModal( $tree ){

    var $formContent = $('<form class="webpage-form" />')
      .append( $('<p/>').append( $('<label/>').addClass('desc').text( $.i18n.t('webpage.name') ) )
                     .append( $('<input/>').attr('type','text').attr('name', 'name') )
      )
      .append( $('<p/>').append( $('<label/>').addClass('desc').text( $.i18n.t('webpage.template') ) )
                        .append( $('<br/>') )
                        .append( $('<select/>').attr('name', 'template').append( $('<option/>').attr('value','').text('') ) )
      )
      .append( $('<p/>').css('text-align', 'right').append( $('<input/>').attr('type','submit').addClass('btn').attr('value', $.i18n.t('webpage.create')) ) );

    $.getJSON( '/webbits/templates.json', function( json ){
      if( json )
        for( var i in json )
          $formContent.find('select').append( $('<option/>').attr('value',json[i]._id).text( json[i].name ) );
    });

    ioco.modal({ 
      title: $.i18n.t('webpage.create_title'),
      $content: $formContent,
      height: 300,
      completed: function( $modal ){

        $modal.find('input[type=text]').focus();

        $modal.find('form').on('submit', function(e){

          e.preventDefault();

          var name = $(this).find('input[name=name]').val()
            , templateId = $(this).find('select[name=template]').val();

          if( name.length < 1 )
            return ioco.notify('error', $.i18n.t('webpage.name_required') );

          $.ajax({ url: '/webpages', type: 'post', data: { _csrf: ioco._csrf, webpage: { name: name }, templateId: templateId },
                   success: function( response ){
                      if( !response.success )
                        return ioco.notify( $.i18n.t('creation.failed', {name: name}) + ' ' + $.i18n.t('reason') + ':' + response.error );
                      var item = new $tree.TreeItemModel( response.webpage );
                      $tree.treeViewModel.items.push( item );
                      $tree.find('[data-id='+item._id+'] a.link-trigger:first').click();
                      ioco.modal('close');
                    }
          });

        });

      }
    });

  }

  $('#ioco-webpages .ioco-tree').iocoTree({
    url: '/webpages.json?roots=true',
    saveUrl: '/webpages/',
    saveKey: 'webpage',
    saveAttrs: [ 'name', 'tags', 'content', 'slug', 'properties', 'frontpage', 'template' ],
    defaultValues: { properties: {}, content: '', _type: 'WebPage' },
    beforeSave: function( form, data, save ){
      console.log(data);
      $('#ioco-webpage-form:visible .ioco-web-bit.root:first').data('webBit').save( function(){
        save( data );
      });
    },
    before: function( tree ){
      tree.TreeItemModel.prototype.previewWebPage = function(){
        window.open( '/pub'+this.slug() );
      }

    },
    replaceNewItemForm: function( itemData, form, $tree ){
      renderNewModal( $tree );
    },
    afterShowForm: function( itemData, form, $tree ){
      renderForm( itemData ); 
    }
  });

  $('#ioco-webpages .ioco-tree ul:first').nestedSortable({
      listType: 'ul',
      forcePlaceholderSize: true,
      handle: 'div',
      helper: 'clone',
      items: 'li',
      opacity: .6,
      placeholder: 'placeholder',
      revert: 250,
      delay: 250,
      tolerance: 'pointer',
      toleranceElement: '> div',
      maxLevels: 5,
      isTree: true,
      expandOnHover: 700,
      startCollapsed: true,
      stop: function( e, ui ){
        function collectChildren( parent ){
          var arr = [];
          parent.find('ul:first').children().each(function(){ arr.push( $(this).attr('data-id') ); });
          return arr;
        }
        var parent = $(ui.item).parent().closest('li.tree-li');
        var children;

        if( parent.length )
          children = collectChildren( parent );
        else
          children = collectChildren( self );
        var formData = { _csrf: $('#_csrf').val(), ids: children.join(',') };
        if( parent.length )
          formData.path = $(parent).attr('data-id') + ':' + $(parent).attr('data-_type');
        $.post( '/documents/sort', formData, function( data ){
          if( data.success )
            ioco.notify( data.flash );
          else
            ioco.notify( { error: $.i18n.t('document.order.saving.failed')})
        })
      }
  });