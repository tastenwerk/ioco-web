link( rel='stylesheet', href='/stylesheets/web.css' )
link( rel='stylesheet', href='/stylesheets/ioco-page.css')
link( rel='stylesheet', href='/stylesheets/ioco.page-designer.css' )
#ioco-webpages
  .ioco-sidebar
    .ioco-tree

      h1.title=t('webpages.title')

      .tree-controls
        a.btn.w-icn-only.live-tipsy( href='#', translate-title='webpages.new', data-bind='click: newItemForm' )
          span.icn-plus.icn
        a.btn.w-icn-only.live-tipsy( href='#', translate-title='refresh', data-bind='click: fetchData' )
          span.icn.icn-refresh
        a.btn.w-icn-only.live-tipsy.enableable( href='#', translate-title='delete_selected', data-bind='css: {enabled: selectedItems().length > 0}, click: deleteSelected')
          span.icn.icn-trash

      br.clearfix

      ul.tree-content( data-bind='template: {name: "webItemTemplate", foreach: items}' )

  .ioco-content

    .click-for-details.no-item-form
      h1.title=t('webpages.title')
      span=t('document.click_for_details')

    #ioco-user-form.item-form( data-bind='template: {name: "webItemForm"}' )

include ko_templates/web_item
include ko_templates/web_item_form

include new_modal_form

script(type='text/javascript', src='/javascripts/ioco.page-designer.js')
script(type='text/javascript', src='/javascripts/web_files_view_model.js')

script(type='text/javascript')
  if( typeof(ace) === 'undefined' )
    $.getScript( '/javascripts/3rdparty/ace.js' );

- for( i in ioco.plugins )
  - if( ioco.plugins[i].pageDesignerJSPlugins )
    - for( var j in ioco.plugins[i].pageDesignerJSPlugins )
      script(type='text/javascript', src='#{ioco.plugins[i].pageDesignerJSPlugins[j]}')
  
script(type='text/javascript')
  
  $('#ioco-webpages .ioco-tree').iocoTree({
    url: '/webpages.json?roots=true',
    saveUrl: '/webpages/',
    saveKey: 'webPage',
    saveAttrs: [ 'name', 'tags', 'content', 'slug', 'properties' ],
    defaultValues: { properties: {}, content: '', _type: 'WebPage' },
    beforeSave: function( form, data, save ){
      $('.ioco-page-content:visible .ioco-web-bit.root:first').data('webBit').save( function(){
        save( data );
      });
    },
    before: function( tree ){
      tree.TreeItemModel.prototype.previewWebPage = function(){
        window.open( '/pub'+this.slug() );
      }

    },
    afterShowForm: function( itemData, form, $tree ){
      function renderForm( item ){
        $('#pd').iocoPageDesigner({
          i18n: true,
          csrf: $('#_csrf').val(),
          webPage: new ioco.pageDesigner.WebPage( item ),
          after: {
            create: function( plugin, webBit, boxDom, json, done ){
              ioco.notify( json.flash );
              done();
            }
          },
          on: function( action, item, callback ){
            if( action === 'createRootWebBit' ){
              itemData.rootWebBitId = item.rootWebBitId;
              callback( null );
            }
          }
        });
        $('.top-tabs-nav-title.page-name').text( item.name() );
        ioco.parseTranslations();
      }

      function renderNewModal(){

        // creating a new webpage

        ioco.modal({ 
          title: $.i18n.t('webpage.Create'),
          html: ,
          completed: function( html ){
            html.find('#cssEditor').css({ height: html.find('.sidebar-content').height() - 125});
            html.find('#htmlEditor').css({ height: html.find('.sidebar-content').height() - 65, top: 60});
            html.find('#jsEditor').css({ height: html.find('.sidebar-content').height() - 65, top: 60});
          },
          on: function modalOn( action, $modal ){
            if( action === 'close' ){
            }
          },
          windowControls: {
            save: {
              icn: 'icn-save',
              title: pageDesigner.translate('ioco.page_designer.save'),
              callback: function( $modal ){
                // TODO: webBit.save();
              }
            }
          }*/
        });

      }

      if( itemData.name ){
        renderForm( itemData ); 
      } else {
        renderNewModal();

        var name = prompt( $.i18n.t('webpage.Enter name') );
        if( !name || name.length < 1 )
          return;
        $.ajax({ url: '/webpages', type: 'post', data: { _csrf: ioco._csrf, webpage: { name: name } },
                 success: function( response ){
                    if( !response.success )
                      return ioco.notify( $.i18n.t('creation.failed', {name: name}) + ' ' + $.i18n.t('reason') + ':' + response.error );
                    var item = new $tree.TreeItemModel( response.webpage );
                    $tree.treeViewModel.items.push( item );
                    $tree.find('[data-id='+item._id+'] a.link-trigger:first').click();
                  }
        });
      }
    }
  });
  $('#ioco-webpages .ioco-tree ul:first').nestedSortable({
      listType: 'ul',
      forcePlaceholderSize: true,
      handle: 'div',
      helper: 'clone',
      items: 'li',
      opacity: .6,
      placeholder: 'placeholder',
      revert: 250,
      delay: 250,
      tolerance: 'poioco',
      toleranceElement: '> div',
      maxLevels: 5,
      isTree: true,
      expandOnHover: 700,
      startCollapsed: true,
      stop: function( e, ui ){
        function collectChildren( parent ){
          var arr = [];
          parent.find('ul:first').children().each(function(){ arr.push( $(this).attr('data-id') ); });
          return arr;
        }
        var parent = $(ui.item).parent().closest('li.tree-li');
        var children;

        if( parent.length )
          children = collectChildren( parent );
        else
          children = collectChildren( self );
        var formData = { _csrf: $('#_csrf').val(), ids: children.join(',') };
        if( parent.length )
          formData.path = $(parent).attr('data-id') + ':' + $(parent).attr('data-_type');
        $.post( '/documents/sort', formData, function( data ){
          if( data.success )
            ioco.notify( data.flash );
          else
            ioco.notify( { error: $.i18n.t('document.order.saving.failed')})
        })
      }
  });